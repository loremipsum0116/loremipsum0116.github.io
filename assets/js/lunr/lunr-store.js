var store = [{
        "title": "자바 변수",
        "excerpt":"변수(Variable), 이 단어를 들었을 때 여러분은 무엇을 떠올리시나요? 아마 학창 시절 수학 시간에 만났던 ‘미지수 x’처럼, ‘아직 정해지지 않은 값’을 먼저 떠올리는 분도 계실 거예요. 하지만 자바(Java)를 비롯한 대부분의 프로그래밍 언어에서 변수는 조금 더 실용적이고 구체적인 의미를 가집니다. 바로 “데이터를 저장하기 위해 컴퓨터 메모리 공간에 붙여진 이름”입니다. 코드를 작성할 때...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-variables-final/",
        "teaser": null
      },{
        "title": "자바 변수와 연산자",
        "excerpt":"자바 변수와 연산자: 데이터를 다루는 개발자의 필수 도구 지난 글에서 자바 변수의 개념과 종류, 그리고 생명 주기에 대해 상세히 알아보았습니다. 변수가 데이터를 담는 ‘그릇’이라면, 이 데이터를 활용하여 유의미한 작업을 수행하려면 무엇이 필요할까요? 바로 **연산자(Operator)**입니다! 연산자는 변수에 담긴 값을 가지고 다양한 수식 계산, 논리적 판단, 값 할당 등의 처리를 할 수...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-operators/",
        "teaser": null
      },{
        "title": "자바 연산자 도표",
        "excerpt":"이 포스트에서는 이전 포스트의 연산자 내용 복습과 함께 모든 자바 연산자 종류, 용도, 예제등을 도표를 통해 직관적으로 정리합니다. 자바 연산자 정리 자바에서 연산자는 피연산자 수에 따라 단항/이항/삼항으로 나뉘며, 기능에 따라 여러 범주로 구분됩니다. 연산자 분류표 종류 연산자 피연산자 수 산출 타입 기능 설명 산술 +, -, *, /, % 이항...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-operators-summary/",
        "teaser": null
      },{
        "title": "자바 BigDecimal과 Scanner",
        "excerpt":"자바의 핵심 유틸리티: BigDecimal과 Scanner 깊이 이해하기 자바 프로그래밍에서 숫자를 다루고 사용자로부터 입력을 받는 것은 매우 흔한 작업입니다. 특히 금융 시스템처럼 고정밀 계산이 필수적이거나, 사용자 친화적인 입력 처리가 필요한 상황에서는 특정 클래스들을 적절히 활용하는 것이 중요합니다. 이번 글에서는 자바의 표준 라이브러리 중 이러한 목적에 특화된 두 가지 핵심 클래스, **BigDecimal**과...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-bigdecimal-scanner/",
        "teaser": null
      },{
        "title": "자바 조건문: if문과 switch문",
        "excerpt":"자바 조건문: 프로그램의 흐름을 결정하는 if문과 switch문 프로그래밍은 마치 복잡한 미로를 헤쳐나가는 것과 같습니다. 때로는 직진하고, 때로는 좌회전하거나 우회전하며 가장 효율적인 길을 찾아야 하죠. 자바에서 이러한 ‘경로 결정’을 담당하는 것이 바로 **조건문(Conditional Statement)**입니다. 조건문은 특정 조건에 따라 프로그램의 실행 흐름을 변경할 때 사용되는 핵심 제어 구조입니다. “만약 이 조건이 참이면...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-if-switch/",
        "teaser": null
      },{
        "title": "자바 반복문 - for문과 이중 for문",
        "excerpt":"자바 반복문: 코드의 효율성을 높이는 for문과 이중 for문 프로그래밍에서 **반복문(Loop Statement)**은 특정 코드 블록을 여러 번 실행해야 할 때 사용하는 핵심적인 제어 구조입니다. 수많은 데이터를 처리하거나, 일정한 패턴을 가진 출력을 만들어낼 때 반복문은 개발자의 시간을 절약하고 코드의 효율성을 극대화합니다. 특히 for문은 반복 횟수가 명확할 때 가장 강력한 성능을 발휘하며, 필요에...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-for-loops/",
        "teaser": null
      },{
        "title": "자바 향상된 for문",
        "excerpt":"자바의 간결한 반복: 향상된 for문 (for-each 루프) 자바에서 배열이나 컬렉션(List, Set 등)에 저장된 요소들을 순차적으로 탐색할 때, **향상된 for문 (Enhanced for Loop)**은 매우 유용하고 간결한 방법을 제공합니다. 이 반복문은 때로는 for-each 루프라고도 불리며, 기존의 일반 for문보다 코드가 짧고, 인덱스를 직접 다룰 필요가 없어 실수 방지 및 코드 가독성 향상에 크게...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-enhanced-for/",
        "teaser": null
      },{
        "title": "MySQL 기초 문법(1)",
        "excerpt":"📘 1단계: MySQL 기초 문법 - 데이터 정의어(DDL) 및 데이터 조작어(DML) 프로그래밍의 핵심이 특정 로직을 구현하는 것이라면, 데이터베이스의 핵심은 데이터를 효율적으로 저장하고 관리하는 것입니다. MySQL을 포함한 관계형 데이터베이스는 SQL(Structured Query Language)이라는 언어를 사용하여 데이터와 상호작용합니다. SQL은 크게 데이터베이스의 구조를 정의하는 DDL(Data Definition Language)과 데이터를 조작하는 DML(Data Manipulation Language)로 나뉩니다. 이번...","categories": ["sql"],
        "tags": [],
        "url": "/ko/sql-basic(1)/",
        "teaser": null
      },{
        "title": "JSP 기본 셋팅",
        "excerpt":"이번 게시글은 이클립스 IDE 기준, JSP 프로젝트 생성에 대한 포스팅 입니다. 시작하기에 앞서, 해당 과정을 원활히 따라오기 위해 다운 받아야 할 파일 링크를 첨부합니다. https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.52/bin/apache-tomcat-9.0.52-windows-x64.zip Tomcat (톰캣): Apache Tomcat은 웹 서버의 한 종류로, 특히 Java 기반의 웹 애플리케이션(JSP, Servlet 등)을 실행하는 데 사용되는 오픈 소스 소프트웨어입니다. 웹 브라우저의 요청을 받아...","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp-basic(1)/",
        "teaser": null
      },{
        "title": "웹 개발 기초 개념 정리",
        "excerpt":"📘 웹 개발 기초 개념 정리 소프트웨어 개발 초기 단계에서 전문 용어에 대한 명확한 이해는 중요한 선행 과제입니다. 특히 웹 기반 애플리케이션 개발 시에는 방대한 개념들을 습득해야 합니다. 본 문서에서는 소프트웨어 발전 과정부터 HTTP, 클라이언트-서버 구조, 웹 서버와 WAS의 차이점, 웹 컨테이너, 그리고 서블릿에 이르는 핵심 용어들을 상세히 설명합니다. 💡...","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp-basic(2)/",
        "teaser": null
      },{
        "title": "JSP의 이해 및 기초",
        "excerpt":"JSP의 이해 및 기초: 동적 웹 페이지 구현 메커니즘 본 포스팅에서는 웹 개발의 핵심 기술 중 하나인 JSP(Java Server Pages)에 대해 다룹니다. 동적 웹 페이지의 개념과 JSP의 필요성, 서블릿과의 관계, 그리고 JSP 파일의 기본 구조 및 주요 요소를 분석하고자 합니다. 🌟 JSP 개요 및 동적 웹 페이지의 이해 JSP는 동적...","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp-basic(3)/",
        "teaser": null
      },{
        "title": "JSP의 이해 및 기초 (2)",
        "excerpt":"JSP 핵심 요소: 내장 객체, EL, 에러 처리, 서블릿과의 관계 JSP(Java Server Pages)는 동적 웹 페이지를 만들기 위한 자바 기반 기술이에요. 이 문서는 JSP 페이지에서 개발자의 생산성을 높이고 웹 애플리케이션을 효율적으로 관리하기 위한 핵심 요소들을 심층적으로 다룹니다. JSP의 특별한 ‘만능 도구’인 내장 객체(Implicit Objects)부터, 간결한 데이터 표현을 위한 EL(Expression Language),...","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp-basic(3-2)/",
        "teaser": null
      },{
        "title": "JSP 실행 과정 심층 분석: 브라우저 렌더링 메커니즘",
        "excerpt":"JSP 실행 과정 심층 분석: 브라우저 렌더링 메커니즘 우리가 생성한 .jsp 파일은 웹 브라우저에서 직접 실행되지 않습니다. 대신, 웹 컨테이너(WAS, 예를 들면 Tomcat)의 정교한 처리 과정을 거쳐야만 최종적으로 웹 브라우저가 이해하고 렌더링할 수 있는 HTML 페이지로 변환되어 사용자에게 전달됩니다. 이 문서는 JSP 파일이 클라이언트의 요청부터 브라우저에 표시되기까지의 모든 단계를 상세한...","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp-basic(4)/",
        "teaser": null
      },{
        "title": "웹 브라우저와 서블릿 간 데이터 전송 방식 및 비즈니스 로직 처리",
        "excerpt":"웹 브라우저와 서블릿 간 데이터 전송 방식 및 비즈니스 로직 처리 웹 애플리케이션에서 클라이언트(웹 브라우저)와 서버(서블릿)는 HTTP 프로토콜을 통해 데이터를 주고받습니다. 이 과정에서 데이터를 전송하는 방식은 크게 GET과 POST로 나뉩니다. 이 문서에서는 두 가지 전송 방식의 특징과 함께, 서블릿이 클라이언트 요청을 받아 비즈니스 로직을 처리하는 과정을 상세히 설명합니다. 🌟 3....","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp.basic(5)/",
        "teaser": null
      },{
        "title": "서블릿에서 클라이언트 요청 데이터 처리 및 응답 전송",
        "excerpt":"서블릿에서 클라이언트 요청 데이터 처리 및 응답 전송 웹 애플리케이션에서 클라이언트와 서버 간의 상호작용은 HTTP 요청과 응답을 통해 이루어집니다. 서블릿은 이 과정의 핵심 주체로서, 클라이언트로부터 들어오는 요청 데이터를 정확히 파싱하고, 그에 맞는 적절한 응답을 생성하여 다시 클라이언트에게 보내는 역할을 합니다. 이 문서에서는 HttpServletRequest와 HttpServletResponse 객체가 제공하는 주요 메서드들을 코드 예시와...","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp.basic(6)/",
        "teaser": null
      },{
        "title": "JSP 액션 태그와 JSTL",
        "excerpt":"JSP 액션 태그와 JSTL: 생산성을 높이는 웹 개발 기법 본 포스팅에서는 JSP 개발의 생산성과 코드 가독성을 극대화하는 JSP 액션 태그와 JSTL(JSP Standard Tag Library)에 대해 심층적으로 다룹니다. 특히 JavaBean과의 연동을 중심으로, 동적 웹 페이지 구현 시 스크립트릿(Scriptlet) 사용을 최소화하고 선언적인 방식으로 개발하는 방법에 초점을 맞출 것입니다. 🌟 7. JSP 액션...","categories": ["jsp"],
        "tags": [],
        "url": "/ko/jsp-basic(7)/",
        "teaser": null
      },{
        "title": "자바 참조타입",
        "excerpt":"자바 참조 타입의 메모리 사용: 변수가 데이터를 품는 방식 이해하기 자바의 데이터 타입은 **기본 타입(Primitive Type)**과 **참조 타입(Reference Type)**으로 나뉩니다. 이 두 타입은 단순히 데이터를 다루는 방식만 다른 게 아니라, 메모리에 저장되고 관리되는 방식에서도 근본적인 차이를 보입니다. 특히, 이 차이는 두 변수가 동일한지 비교할 때 사용하는 == 연산자의 동작 방식에서...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-reference/",
        "teaser": null
      },{
        "title": "자바 참조타입 - 일차원 배열",
        "excerpt":"자바의 데이터 타입: 기본 타입과 참조 타입 자바의 데이터 타입은 크게 **기본 타입(Primitive Type)**과 **참조 타입(Reference Type)**으로 나뉩니다. 기본 타입이 실제 값을 변수 내부에 직접 저장하는 반면, 참조 타입은 실제 객체(데이터)가 저장된 메모리 공간의 **주소(번지)**를 변수에 저장합니다. 이 주소를 통해 실제 객체에 접근하게 되므로 ‘참조’라는 이름이 붙었습니다. 일반적으로 클래스, 인터페이스,...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-array/",
        "teaser": null
      },{
        "title": "자바 참조타입 - 다차원 배열",
        "excerpt":"자바 배열 심화: 다차원 배열과 배열 복사 앞서 일차원 배열의 개념과 활용법을 익혔습니다. 하지만 실제 데이터를 다루다 보면 일렬로 나열된 형태를 넘어, 표나 격자처럼 여러 차원으로 구성된 데이터를 처리해야 할 때가 많습니다. 이때 유용하게 사용되는 것이 바로 **다차원 배열(Multi-dimensional Array)**입니다. 특히 이차원 배열은 행(Row)과 열(Column)로 구성된 표 형태의 데이터를 다루는...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-array(2)/",
        "teaser": null
      },{
        "title": "자바 객체지향-클래스",
        "excerpt":"자바 객체지향 프로그래밍: 현실 세계를 코드로 담다 지금까지 우리는 자바의 기본적인 데이터 타입, 변수, 연산자, 조건문 등 프로그램을 구성하는 개별적인 요소들을 배워왔습니다. 하지만 실제 복잡한 소프트웨어를 만들 때는 단순히 이러한 요소들을 나열하는 것만으로는 부족합니다. 마치 건물을 지을 때 벽돌 하나하나를 놓는 것을 넘어, 전체적인 설계도와 각 부분의 역할을 이해해야 하는...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-oop&class/",
        "teaser": null
      },{
        "title": "자바 객체지향-메소드",
        "excerpt":"자바 객체지향 프로그래밍: 메소드 심화와 활용 이전 글에서 객체지향 프로그래밍의 핵심인 클래스, 객체, 인스턴스 개념을 배우고, 클래스 내부에 선언되는 변수의 종류에 대해서도 알아보았습니다. 이제 객체가 ‘행동’을 수행하는 통로인 **메소드(Method)**에 대해 더 깊이 파고들 시간입니다. 메소드는 단순한 기능 단위를 넘어, 객체지향의 다양한 원칙을 구현하는 데 중요한 역할을 합니다. 이번 글에서는 자바...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-oop&method/",
        "teaser": null
      },{
        "title": "자바 객체지향-클래스(2)",
        "excerpt":"자바 객체지향 프로그래밍: 생성자와 초기화, 그리고 캡슐화 이전 글에서 클래스, 객체, 인스턴스의 개념과 메소드의 다양한 활용법을 배웠습니다. 이제 객체지향 프로그래밍의 또 다른 핵심 요소인 **생성자(Constructor)**를 통해 객체가 처음 만들어질 때 어떻게 초기화되는지 알아보겠습니다. 또한, 객체지향의 중요한 원칙 중 하나인 **캡슐화(Encapsulation)**를 구현하는 방법과 이를 위한 접근 제어자(Access Modifier), 그리고 Getter/Setter 메소드에...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-oop&class(2)/",
        "teaser": null
      },{
        "title": "자바 객체지향-상속, 다형성, 추상 클래스",
        "excerpt":"자바 객체지향 프로그래밍: 상속과 다형성, 추상 클래스 이전 글들에서 객체지향의 기본 요소인 클래스, 객체, 생성자, 그리고 캡슐화에 대해 알아보았습니다. 이제 객체지향 프로그래밍의 또 다른 강력한 기둥인 **상속(Inheritance)**과 다형성(Polymorphism), 그리고 이와 밀접하게 관련된 추상 클래스(Abstract Class) 개념을 탐구할 차례입니다. 이 개념들은 코드의 재사용성을 극대화하고, 프로그램을 더욱 유연하고 확장 가능하게 만듭니다. 현실...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-oop&inheritance/",
        "teaser": null
      },{
        "title": "자바 생성자 호출 순서",
        "excerpt":"자바 객체지향: 상속과 생성자 호출 순서 (Constructor Chaining) 자바에서 객체가 생성될 때, 우리는 new 키워드와 함께 클래스의 **생성자(Constructor)**를 호출합니다. 그런데 만약 클래스들이 상속 관계에 있다면, 단 하나의 생성자를 호출하더라도 내부적으로 여러 클래스의 생성자들이 연쇄적으로 호출되는 복잡한 과정이 일어납니다. 이 과정을 **생성자 연쇄 호출(Constructor Chaining)**이라고 합니다. 이러한 생성자 호출 순서를 정확히...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-oop&class(3)/",
        "teaser": null
      },{
        "title": "자바 객체지향-인터페이스",
        "excerpt":"자바 객체지향: 인터페이스 (Interface) 자바 객체지향 프로그래밍에서 **인터페이스(Interface)**는 클래스들이 구현해야 하는 메소드의 집합을 정의하는 특별한 종류의 추상 클래스라고 볼 수 있습니다. 인터페이스는 객체의 **행위(Behavior)**를 정의하고, 다양한 클래스들이 동일한 행위를 가지도록 표준을 제시하는 데 사용됩니다. 인터페이스는 클래스와는 다르게 객체를 직접 생성할 수 없으며, 주로 **다형성(Polymorphism)**을 높이고, 여러 클래스에 걸쳐 공통된 기능을...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-interface/",
        "teaser": null
      },{
        "title": "자바 핵심 클래스 및 객체 동등 비교",
        "excerpt":"자바 핵심 클래스: Object와 유용한 유틸리티 클래스 지금까지 자바의 기본 문법과 배열과 같은 데이터 구조를 살펴보았습니다. 이제 모든 자바 클래스의 조상인 java.lang.Object 클래스의 중요한 역할과, 객체지향 프로그래밍에서 필수적인 객체 동등 비교 방법에 대해 심도 있게 알아보겠습니다. 또한, 기본 타입을 객체로 다루게 해주는 포장(Wrapper) 클래스, 수학 연산을 위한 Math 클래스, 그리고...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-oop-detail/",
        "teaser": null
      },{
        "title": "자바 쓰레드: 프로그램, 프로세스 그리고 동시성",
        "excerpt":"자바 쓰레드: 프로그램, 프로세스 그리고 동시성 현대 소프트웨어는 대부분 여러 작업을 동시에 처리할 수 있는 능력을 요구합니다. 웹 브라우저에서 여러 탭을 열고 동시에 사용할 수 있거나, 워드 프로세서에서 문서를 편집하면서 동시에 맞춤법 검사를 수행하는 것 등이 그 예시입니다. 이러한 동시성(Concurrency) 또는 병렬성(Parallelism)을 구현하는 데 핵심적인 역할을 하는 것이 바로 쓰레드(Thread)...","categories": ["java"],
        "tags": [],
        "url": "/ko/java-threads/",
        "teaser": null
      }]
